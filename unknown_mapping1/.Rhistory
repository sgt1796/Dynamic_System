library(ggplot2)
library(plotly)
library(dplyr)
a.max = 100
b = 1:100
c = 1:100
matrix.frame = tibble(a = numeric(),
b = numeric(),
c = numeric(),
value = numeric())
for (a_i in 2:a.max){
matrix.val = outer(b, c, function(b_i, c_i) {(a_i^2 * b_i - b_i) %% c_i})
matrix.vec = reshape2::melt(matrix.val, varnames = c("b", "c"))
matrix.vec["a"] = a_i
matrix.frame = matrix.frame %>%
add_row(matrix.vec)
}
p = ggplot(data = matrix.frame,
aes(x = b, y = c, fill = value, frame = a)) +
geom_tile() +
scale_fill_gradient(low="purple", high="orange") +
theme_minimal() +
coord_fixed()
View(matrix.frame)
## f(x) = (a^2 * b - b) mod c
## Long-term of f(x) when fixing a, b
z = matrix.frame %>%
group_by(c) %>%
# summarize(orbit = purrr::map(list(value), unique)) %>%
summarize(orbit = list(value)) %>%
tidyr::unnest_longer(orbit)
z
z.norm = z %>%
mutate(orbit = orbit/c)
ggplot(data = z.norm, aes(x = c, y = orbit)) +
geom_point(alpha = 0.1, size = 0.1) +
scale_y_continuous("f(x)") +
scale_x_continuous("c") +
theme_minimal()
ggplot(data = z.norm, aes(x = c, y = orbit)) +
geom_point(alpha = 0.1, size = 0.1) +
scale_y_continuous("f(x)") +
scale_x_log10("c") +
theme_minimal()
a
## Long-term of f(x) when fixing a, c
z = matrix.frame %>%
group_by(b) %>%
# summarize(orbit = purrr::map(list(value), unique)) %>%
summarize(orbit = list(value)) %>%
tidyr::unnest_longer(orbit)
z
max(z$b)
ggplot(data = z, aes(x = b, y = orbit)) +
geom_point(alpha = 0.1, size = 0.1) +
scale_y_continuous("f(x)") +
scale_x_continuous("b") +
theme_minimal()
#library(shiny)
a.max = 30
b = 1:200
c = 1:200
matrix.frame = tibble(a = numeric(),
b = numeric(),
c = numeric(),
value = numeric())
for (a_i in 2:a.max){
matrix.val = outer(b, c, function(b_i, c_i) {(a_i^2 * b_i - b_i) %% c_i})
matrix.vec = reshape2::melt(matrix.val, varnames = c("b", "c"))
matrix.vec["a"] = a_i
matrix.frame = matrix.frame %>%
add_row(matrix.vec)
}
p = ggplot(data = matrix.frame,
aes(x = b, y = c, fill = value, frame = a)) +
geom_tile() +
scale_fill_gradient(low="purple", high="orange") +
theme_minimal() +
coord_fixed()
ggplotly(p)
p = ggplot(data = matrix.frame,
aes(x = b, y = c, fill = value, frame = a)) +
geom_tile() +
scale_fill_gradient(low="green", high="red") +
theme_minimal() +
coord_fixed()
ggplotly(p)
## f(x) = (a^2 * b - b) mod c
## Long-term of f(x) when fixing a, b
z = matrix.frame %>%
group_by(c) %>%
# summarize(orbit = purrr::map(list(value), unique)) %>%
summarize(orbit = list(value)) %>%
tidyr::unnest_longer(orbit)
#library(shiny)
a.max = 30
b = 1:300
c = 1:300
matrix.frame = tibble(a = numeric(),
b = numeric(),
c = numeric(),
value = numeric())
for (a_i in 2:a.max){
matrix.val = outer(b, c, function(b_i, c_i) {(a_i^2 * b_i - b_i) %% c_i})
matrix.vec = reshape2::melt(matrix.val, varnames = c("b", "c"))
matrix.vec["a"] = a_i
matrix.frame = matrix.frame %>%
add_row(matrix.vec)
}
p = ggplot(data = matrix.frame,
aes(x = b, y = c, fill = value, frame = a)) +
geom_tile() +
scale_fill_gradient(low="purple", high="green") +
theme_minimal() +
coord_fixed()
ggplotly(p)
## gganimate to save as gif
library(gganimate)
?transition_manual
anim = p + transition_manual() +
labs(title = 'a = {current_frame}')
anim = p + transition_manual(a) +
labs(title = 'a = {current_frame}')
animate(anim)
library(gifski)
anim_save("animation.gif", animation = anim, renderer = gifski_renderer())
#library(shiny)
a.max = 30
b = 1:1000
c = 1:1000
matrix.frame = tibble(a = numeric(),
b = numeric(),
c = numeric(),
value = numeric())
for (a_i in 2:a.max){
matrix.val = outer(b, c, function(b_i, c_i) {(a_i^2 * b_i - b_i) %% c_i})
matrix.vec = reshape2::melt(matrix.val, varnames = c("b", "c"))
matrix.vec["a"] = a_i
matrix.frame = matrix.frame %>%
add_row(matrix.vec)
}
p = ggplot(data = matrix.frame,
aes(x = b, y = c, fill = value, frame = a)) +
geom_tile() +
scale_fill_gradient(low="purple", high="green") +
theme_minimal() +
coord_fixed()
anim = p + transition_manual(a) +
labs(title = 'a = {current_frame}')
anim_save("animation.gif", animation = anim, renderer = gifski_renderer())
View(anim)
View(matrix.frame)
write.csv(matrix.frame, file = "matrix_frame.csv", row.names = FALSE)
# Save as compressed CSV
write.csv(matrix.frame, file = gzfile("matrix_frame.csv.gz"), row.names = FALSE)
